# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API –°–≤—ñ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫—É
"""

import wbgapi as wb
import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import sys
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–¥—É–≤–∞–Ω–Ω—è –¥–ª—è Windows
if sys.platform == "win32":
    try:
        import locale
        locale.setlocale(locale.LC_ALL, 'uk_UA.UTF-8')
    except:
        pass

class WorldBankDataProvider:
    """–ö–ª–∞—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑—ñ –°–≤—ñ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫—É"""
    
    def __init__(self):
        # In-memory cache for API responses / –ö–µ—à –≤ –ø–∞–º'—è—Ç—ñ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π API
        self._cache = {}
        self._cache_ttl = 1800  # 30 minutes cache TTL / TTL –∫–µ—à—É 30 —Ö–≤–∏–ª–∏–Ω
        self._last_request_time = 0
        self._min_request_interval = 10  # Minimum 10 seconds between requests / –ú—ñ–Ω—ñ–º—É–º 10 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
        
        self.indicators = {
            'GDP': 'NY.GDP.MKTP.CD',  # –í–í–ü (–ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏, –¥–æ–ª–∞—Ä–∏ –°–®–ê)
            'GDP_PER_CAPITA': 'NY.GDP.PCAP.CD',  # –í–í–ü –Ω–∞ –¥—É—à—É –Ω–∞—Å–µ–ª–µ–Ω–Ω—è
            'INFLATION': 'FP.CPI.TOTL.ZG',  # –Ü–Ω—Ñ–ª—è—Ü—ñ—è —Å–ø–æ–∂–∏–≤—á–∏—Ö —Ü—ñ–Ω
            'UNEMPLOYMENT': 'SL.UEM.TOTL.ZS',  # –ë–µ–∑—Ä–æ–±—ñ—Ç—Ç—è
            'EXPORTS': 'NE.EXP.GNFS.CD',  # –ï–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥
            'IMPORTS': 'NE.IMP.GNFS.CD',  # –Ü–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä—ñ–≤ —Ç–∞ –ø–æ—Å–ª—É–≥
            'POPULATION': 'SP.POP.TOTL',  # –ù–∞—Å–µ–ª–µ–Ω–Ω—è
            'LIFE_EXPECTANCY': 'SP.DYN.LE00.IN',  # –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è
            'INTERNET_USERS': 'IT.NET.USER.ZS',  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É (% –Ω–∞—Å–µ–ª–µ–Ω–Ω—è)
            'EDUCATION_EXPENDITURE': 'SE.XPD.TOTL.GD.ZS',  # –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –æ—Å–≤—ñ—Ç—É (% –í–í–ü)
        }
        
        self.countries = {
            'UA': '–£–∫—Ä–∞—ó–Ω–∞',
            'US': '–°–®–ê',
            'DE': '–ù—ñ–º–µ—á—á–∏–Ω–∞',
            'FR': '–§—Ä–∞–Ω—Ü—ñ—è',
            'GB': '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è',
            'PL': '–ü–æ–ª—å—â–∞',
            'CN': '–ö–∏—Ç–∞–π',
            'JP': '–Ø–ø–æ–Ω—ñ—è',
            'IN': '–Ü–Ω–¥—ñ—è',
            'BR': '–ë—Ä–∞–∑–∏–ª—ñ—è',
            'CA': '–ö–∞–Ω–∞–¥–∞',
            'AU': '–ê–≤—Å—Ç—Ä–∞–ª—ñ—è',
            'IT': '–Ü—Ç–∞–ª—ñ—è',
            'ES': '–Ü—Å–ø–∞–Ω—ñ—è',
        }
    
    def _get_cache_key(self, endpoint: str, params: Dict[str, any]) -> str:
        """Generate cache key for API request / –ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –∫–µ—à—É –¥–ª—è API –∑–∞–ø–∏—Ç—É"""
        sorted_params = sorted(params.items())
        return f"{endpoint}:{':'.join(f'{k}={v}' for k, v in sorted_params)}"

    def _is_cache_valid(self, cache_key: str) -> bool:
        """Check if cached data is still valid / –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —â–µ –∞–∫—Ç—É–∞–ª—å–Ω—ñ"""
        if cache_key not in self._cache:
            return False
        cached_time, _ = self._cache[cache_key]
        return datetime.now() - cached_time < timedelta(seconds=self._cache_ttl)

    def _get_from_cache(self, cache_key: str) -> any:
        """Get data from cache if valid / –û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∑ –∫–µ—à—É —è–∫—â–æ –∞–∫—Ç—É–∞–ª—å–Ω—ñ"""
        if self._is_cache_valid(cache_key):
            _, data = self._cache[cache_key]
            print(f"Returning cached World Bank data for key: {cache_key}")
            return data
        return None

    def _save_to_cache(self, cache_key: str, data: any):
        """Save data to cache / –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ –∫–µ—à"""
        self._cache[cache_key] = (datetime.now(), data)
        print(f"Cached World Bank data for key: {cache_key}")

    def _rate_limit_delay(self):
        """Apply rate limiting / –ó–∞—Å—Ç–æ—Å–æ–≤—É—î –æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –∑–∞–ø–∏—Ç—ñ–≤"""
        import time
        current_time = time.time()
        time_since_last_request = current_time - self._last_request_time
        if time_since_last_request < self._min_request_interval:
            delay = self._min_request_interval - time_since_last_request
            print(f"World Bank API rate limiting: waiting {delay:.2f} seconds")
            time.sleep(delay)
        self._last_request_time = time.time()

    def get_last_update_time(self, endpoint: str, params: Dict[str, any]) -> str:
        """Get last update time for cached data / –û—Ç—Ä–∏–º—É—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        cache_key = self._get_cache_key(endpoint, params)
        if cache_key in self._cache:
            cached_time, _ = self._cache[cache_key]
            return cached_time.strftime("%d.%m.%Y, %H:%M:%S")
        return None
    
    def clear_cache(self):
        """Clear all cached data / –û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à"""
        self._cache.clear()
        print("–ö–µ—à World Bank API –æ—á–∏—â–µ–Ω–æ")
    
    def get_economic_indicators(self, country_codes: List[str] = None, 
                              indicators: List[str] = None, 
                              start_year: int = 2020, 
                              end_year: int = 2023) -> pd.DataFrame:
        """
        –û—Ç—Ä–∏–º–∞—Ç–∏ –µ–∫–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∑—ñ –°–≤—ñ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫—É
        Get econometric indicators from the World Bank
        """
        try:
            # Check cache / –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
            params = {
                'country_codes': country_codes,
                'indicators': indicators,
                'start_year': start_year,
                'end_year': end_year
            }
            cache_key = self._get_cache_key('economic_indicators', params)
            cached_data = self._get_from_cache(cache_key)
            if cached_data is not None:
                return cached_data
            
            # Apply rate limiting / –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ rate limiting
            self._rate_limit_delay()
            if country_codes is None:
                country_codes = list(self.countries.keys())
            
            # Define indicators / –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏
            if indicators is None:
                indicator_codes = list(self.indicators.values())
                indicator_names = list(self.indicators.keys())
            else:
                indicator_codes = [self.indicators.get(ind, ind) for ind in indicators]
                code_to_name = {code: name for name, code in self.indicators.items()}
                indicator_names = [code_to_name.get(code, code) for code in indicator_codes]
            
            # Limit API parameters for stability / –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∞—ó–Ω —Ç–∞ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
            country_codes = country_codes[:8]
            indicator_codes = indicator_codes[:4]
            indicator_names = indicator_names[:4]
            
            # Get data from World Bank with error handling
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ –°–≤—ñ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫—É –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            try:
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –¥–µ–±–∞–≥—É / Logging parameters for debugging
                print(f"üîç World Bank API –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:")
                print(f"   –ö—Ä–∞—ó–Ω–∏: {country_codes}")
                print(f"   –ü–æ–∫–∞–∑–Ω–∏–∫–∏: {indicator_codes}")
                print(f"   –†–æ–∫–∏: {start_year}-{end_year}")
                print(f"   –î—ñ–∞–ø–∞–∑–æ–Ω: {list(range(start_year, end_year + 1))}")
                
                # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ª–æ–≥—ñ–≤
                try:
                    import sys
                    import os
                    # –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ Python path
                    parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
                    if parent_dir not in sys.path:
                        sys.path.append(parent_dir)
                    from app.main import add_server_log
                    
                    add_server_log("worldbank_request", "–ó–∞–ø–∏—Ç –¥–æ World Bank API", {
                        "countries": country_codes,
                        "indicators": indicator_codes,
                        "years": list(range(start_year, end_year + 1)),
                        "start_year": start_year,
                        "end_year": end_year
                    })
                except Exception as log_error:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {log_error}")
                
                # Use direct HTTP requests instead of wbgapi for better reliability
                # / –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º—ñ HTTP –∑–∞–ø–∏—Ç–∏ –∑–∞–º—ñ—Å—Ç—å wbgapi –¥–ª—è –∫—Ä–∞—â–æ—ó –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
                import requests
                
                # Build URL for World Bank API v2
                # / –°—Ç–≤–æ—Ä—é—î–º–æ URL –¥–ª—è World Bank API v2
                countries_str = ';'.join(country_codes)
                date_range = f"{start_year}:{end_year}"
                
                print(f"üåê –ü—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ World Bank API:")
                print(f"   –ö—Ä–∞—ó–Ω–∏: {countries_str}")
                print(f"   –ü–æ–∫–∞–∑–Ω–∏–∫–∏: {indicator_codes}")
                print(f"   –†–æ–∫–∏: {date_range}")
                
                # Make separate requests for each indicator (API limitation)
                # / –†–æ–±–∏–º–æ –æ–∫—Ä–µ–º—ñ –∑–∞–ø–∏—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞ (–æ–±–º–µ–∂–µ–Ω–Ω—è API)
                all_data = []
                
                for indicator_code in indicator_codes:
                    url = f"https://api.worldbank.org/v2/country/{countries_str}/indicator/{indicator_code}?date={date_range}&format=json&per_page=1000"
                    
                    print(f"   –ó–∞–ø–∏—Ç –¥–ª—è {indicator_code}: {url}")
                    
                    # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∞
                    try:
                        import sys
                        import os
                        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                        from app.main import add_server_log
                        
                        add_server_log("worldbank_indicator_request", f"–ó–∞–ø–∏—Ç –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {indicator_code}", {
                            "url": url,
                            "indicator": indicator_code,
                            "countries": countries_str,
                            "date_range": date_range
                        })
                    except Exception as log_error:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞: {log_error}")
                    
                    try:
                        response = requests.get(url, timeout=30)
                        response.raise_for_status()
                        
                        data_json = response.json()
                        
                        if data_json and len(data_json) >= 2 and data_json[1]:
                            metadata = data_json[0]
                            data_records = data_json[1]
                            
                            print(f"   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(data_records)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è {indicator_code}")
                            
                            # –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                            try:
                                import sys
                                import os
                                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                                from app.main import add_server_log
                                
                                add_server_log("worldbank_indicator_success", f"–£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {indicator_code}", {
                                    "indicator": indicator_code,
                                    "records_count": len(data_records),
                                    "total_records": metadata.get('total', 0),
                                    "url": url
                                })
                            except Exception as log_error:
                                print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É: {log_error}")
                            
                            # Convert to DataFrame format
                            # / –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç DataFrame
                            for record in data_records:
                                if record.get('value') is not None:
                                    all_data.append({
                                        'Country': record['country']['id'],
                                        'Country_Name': record['country']['value'],
                                        'Year': int(record['date']),
                                        'Indicator': record['indicator']['id'],
                                        'Value': record['value']
                                    })
                        else:
                            print(f"   ‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {indicator_code}")
                            
                            # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
                            try:
                                import sys
                                import os
                                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                                from app.main import add_server_log
                                
                                add_server_log("worldbank_indicator_no_data", f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {indicator_code}", {
                                    "indicator": indicator_code,
                                    "url": url
                                })
                            except Exception as log_error:
                                print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö: {log_error}")
                            
                    except Exception as indicator_error:
                        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {indicator_code}: {indicator_error}")
                        
                        # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏
                        try:
                            import sys
                            import os
                            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                            from app.main import add_server_log
                            
                            add_server_log("worldbank_indicator_error", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–∫–∞–∑–Ω–∏–∫–∞ {indicator_code}", {
                                "indicator": indicator_code,
                                "url": url,
                                "error": str(indicator_error),
                                "error_type": type(indicator_error).__name__
                            })
                        except Exception as log_error:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏: {log_error}")
                        
                        continue
                
                if not all_data:
                    raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –≤—Å—ñ—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
                
                print(f"‚úÖ –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å—ñ–≤")
                
                # Create DataFrame and pivot to have indicators as columns
                # / –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —è–∫ –∫–æ–ª–æ–Ω–∫–∏
                df_temp = pd.DataFrame(all_data)
                df = df_temp.pivot_table(
                    index=['Country', 'Country_Name', 'Year'], 
                    columns='Indicator', 
                    values='Value', 
                    aggfunc='first'
                ).reset_index()
                
                # Rename columns to friendly names
                # / –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –¥—Ä—É–∂–Ω—ñ –Ω–∞–∑–≤–∏
                code_to_name = {code: name for name, code in self.indicators.items()}
                rename_map = {code: code_to_name.get(code, code) for code in df.columns if code not in ['Country', 'Country_Name', 'Year']}
                df.rename(columns=rename_map, inplace=True)


            except Exception as api_error:
                print(f"API –ø–æ–º–∏–ª–∫–∞ World Bank: {api_error}")
                print("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame.")
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
                print(f"üåê –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ World Bank API:")
                print(f"   URL: {url if 'url' in locals() else 'N/A'}")
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: countries={country_codes}, indicators={indicator_codes}, years={list(range(start_year, end_year + 1))}")
                print(f"   –í—ñ–¥–ø–æ–≤—ñ–¥—å API: {str(api_error)}")
                
                # Create an empty DataFrame with the expected columns to prevent crashes
                # / –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame –∑ –æ—á—ñ–∫—É–≤–∞–Ω–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–±–æ—ó–≤
                cols = ['Country', 'Country_Name', 'Year'] + indicator_names
                df = pd.DataFrame(columns=cols)
            
            # Add country names if not already present / –î–æ–¥–∞—î–º–æ –Ω–∞–∑–≤–∏ –∫—Ä–∞—ó–Ω —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
            if 'Country_Name' not in df.columns:
                df['Country_Name'] = df['Country'].map(self.countries)
                df['Country_Name'] = df['Country_Name'].fillna(df['Country'])
            
            # Reorder columns / –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏
            # Ensure all requested/generated indicators are in the list
            # / –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∞–Ω—ñ/–∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —î –≤ —Å–ø–∏—Å–∫—É
            final_indicator_names = [name for name in indicator_names if name in df.columns]
            cols = ['Country', 'Country_Name', 'Year'] + final_indicator_names
            
            # Select only columns that actually exist in df
            # / –í–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∫–æ–ª–æ–Ω–∫–∏, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —ñ—Å–Ω—É—é—Ç—å –≤ df
            existing_cols = [col for col in cols if col in df.columns]
            df = df[existing_cols]
            
            # Save to cache / –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
            self._save_to_cache(cache_key, df)
            
            return df
            
        except Exception as e:
            # This outer catch handles unexpected errors in *this* function's logic
            # / –¶–µ–π –∑–æ–≤–Ω—ñ—à–Ω—ñ–π catch –æ–±—Ä–æ–±–ª—è—î –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥—ñ—Ü—ñ *—Ü—ñ—î—ó* —Ñ—É–Ω–∫—Ü—ñ—ó
            print(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ get_economic_indicators: {e}")
            # Return an empty DF as a last resort / –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DF –≤ –∫—Ä–∞–π–Ω—å–æ–º—É –≤–∏–ø–∞–¥–∫—É
            cols = ['Country', 'Country_Name', 'Year'] + (indicator_names if 'indicator_names' in locals() else [])
            return pd.DataFrame(columns=cols)

    
    def get_country_comparison(self, countries: List[str], 
                             indicator: str = 'GDP_PER_CAPITA',
                             years: int = 10) -> pd.DataFrame:
        """
        –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∞—ó–Ω –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –ø–æ–∫–∞–∑–Ω–∏–∫–æ–º
        
        Args:
            countries: –°–ø–∏—Å–æ–∫ –∫–æ–¥—ñ–≤ –∫—Ä–∞—ó–Ω
            indicator: –ü–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            years: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
        Returns:
            DataFrame –∑ –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        """
        try:
            current_year = datetime.now().year
            start_year = current_year - years
            
            # –î–æ–∑–≤–æ–ª—è—î–º–æ —è–∫ –¥—Ä—É–∂–Ω—é –Ω–∞–∑–≤—É, —Ç–∞–∫ —ñ –≤–∂–µ –∫–æ–¥
            indicator_code = self.indicators.get(indicator, indicator)
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∞—ó–Ω
            countries_str = ';'.join(countries)
            date_range = f"{start_year}:{current_year}"
            url = f"https://api.worldbank.org/v2/country/{countries_str}/indicator/{indicator_code}?date={date_range}&format=json&per_page=1000"
            
            print(f"üîç –ó–∞–ø–∏—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∞—ó–Ω –¥–æ World Bank API:")
            print(f"   URL: {url}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: countries={countries}, indicator={indicator_code}, years={list(range(start_year, current_year + 1))}")
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ª–æ–≥—ñ–≤
            try:
                import sys
                import os
                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                from app.main import add_server_log
                
                add_server_log("worldbank_comparison_request", "–ó–∞–ø–∏—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∞—ó–Ω", {
                    "url": url,
                    "countries": countries,
                    "indicator": indicator_code,
                    "years": list(range(start_year, current_year + 1))
                })
            except Exception as log_error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {log_error}")
            
            # Use direct HTTP request instead of wbgapi
            # / –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π HTTP –∑–∞–ø–∏—Ç –∑–∞–º—ñ—Å—Ç—å wbgapi
            import requests
            
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            data_json = response.json()
            
            if not data_json or len(data_json) < 2 or not data_json[1]:
                # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
                try:
                    import sys
                    import os
                    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                    from app.main import add_server_log
                    
                    add_server_log("worldbank_comparison_no_data", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", {
                        "url": url,
                        "countries": countries,
                        "indicator": indicator_code
                    })
                except Exception as log_error:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö: {log_error}")
                
                raise Exception("World Bank API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")
            
            data_records = data_json[1]
            
            # –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            try:
                import sys
                import os
                sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                from app.main import add_server_log
                
                add_server_log("worldbank_comparison_success", "–£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", {
                    "url": url,
                    "countries": countries,
                    "indicator": indicator_code,
                    "records_count": len(data_records)
                })
            except Exception as log_error:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è: {log_error}")
            
            # Convert to DataFrame format
            # / –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç DataFrame
            df_data = []
            for record in data_records:
                if record.get('value') is not None:
                    df_data.append({
                        'Country': record['country']['id'],
                        'Year': int(record['date']),
                        'Value': record['value']
                    })
            
            if not df_data:
                raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏")
            
            df = pd.DataFrame(df_data)
            df['Country_Name'] = df['Country'].map(self.countries)
            df['Country_Name'] = df['Country_Name'].fillna(df['Country'])
            
            return df
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∫—Ä–∞—ó–Ω: {e}")
            # Return empty DataFrame instead of calling non-existent method
            # / –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame –∑–∞–º—ñ—Å—Ç—å –≤–∏–∫–ª–∏–∫—É –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –º–µ—Ç–æ–¥—É
            return pd.DataFrame(columns=['Country', 'Year', 'Value', 'Country_Name'])
    
    def get_trend_analysis(self, country: str, 
                          indicators: List[str] = None,
                          years: int = 20) -> Dict:
        """
        –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏
        
        Args:
            country: –ö–æ–¥ –∫—Ä–∞—ó–Ω–∏
            indicators: –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
            years: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∫—ñ–≤ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª—ñ–∑—É
        """
        try:
            if indicators is None:
                indicators = ['GDP', 'GDP_PER_CAPITA', 'INFLATION', 'UNEMPLOYMENT']
            
            current_year = datetime.now().year
            start_year = current_year - years
            
            print(f"–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç—Ä–µ–Ω–¥–∏ –¥–ª—è {country}, –ø–æ–∫–∞–∑–Ω–∏–∫–∏: {indicators}, —Ä–æ–∫–∏: {start_year}-{current_year}")
            
            indicator_codes = [self.indicators[ind] for ind in indicators]
            print(f"–ö–æ–¥–∏ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤: {indicator_codes}")
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            limited_indicators = indicator_codes[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            limited_years = min(years, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–æ–∫—ñ–≤
            
            print(f"–û–±–º–µ–∂–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –ø–æ–∫–∞–∑–Ω–∏–∫–∏={limited_indicators}, —Ä–æ–∫—ñ–≤={limited_years}")
            
            # Use direct HTTP requests instead of wbgapi
            # / –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º—ñ HTTP –∑–∞–ø–∏—Ç–∏ –∑–∞–º—ñ—Å—Ç—å wbgapi
            import requests
            
            all_data = []
            
            for indicator_code in limited_indicators:
                date_range = f"{current_year - limited_years}:{current_year}"
                url = f"https://api.worldbank.org/v2/country/{country}/indicator/{indicator_code}?date={date_range}&format=json&per_page=1000"
                
                print(f"   –ó–∞–ø–∏—Ç —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è {indicator_code}: {url}")
                
                # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤
                try:
                    import sys
                    import os
                    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                    from app.main import add_server_log
                    
                    add_server_log("worldbank_trends_request", f"–ó–∞–ø–∏—Ç —Ç—Ä–µ–Ω–¥—ñ–≤ –¥–ª—è {indicator_code}", {
                        "url": url,
                        "country": country,
                        "indicator": indicator_code,
                        "date_range": date_range
                    })
                except Exception as log_error:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤: {log_error}")
                
                try:
                    response = requests.get(url, timeout=30)
                    response.raise_for_status()
                    
                    data_json = response.json()
                    
                    if data_json and len(data_json) >= 2 and data_json[1]:
                        data_records = data_json[1]
                        
                        print(f"   ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(data_records)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}")
                        
                        # –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É —Ç—Ä–µ–Ω–¥—ñ–≤
                        try:
                            import sys
                            import os
                            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                            from app.main import add_server_log
                            
                            add_server_log("worldbank_trends_success", f"–£—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø–∏—Ç —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}", {
                                "url": url,
                                "country": country,
                                "indicator": indicator_code,
                                "records_count": len(data_records)
                            })
                        except Exception as log_error:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É —Ç—Ä–µ–Ω–¥—ñ–≤: {log_error}")
                        
                        # Convert to DataFrame format
                        # / –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç DataFrame
                        for record in data_records:
                            if record.get('value') is not None:
                                all_data.append({
                                    'Country': record['country']['id'],
                                    'Year': int(record['date']),
                                    'Indicator': record['indicator']['id'],
                                    'Value': record['value']
                                })
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}")
                        
                        # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤
                        try:
                            import sys
                            import os
                            sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                            from app.main import add_server_log
                            
                            add_server_log("worldbank_trends_no_data", f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}", {
                                "url": url,
                                "country": country,
                                "indicator": indicator_code
                            })
                        except Exception as log_error:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —Ç—Ä–µ–Ω–¥—ñ–≤: {log_error}")
                        
                except Exception as indicator_error:
                    print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}: {indicator_error}")
                    
                    # –î–æ–¥–∞—î–º–æ –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏ —Ç—Ä–µ–Ω–¥—ñ–≤
                    try:
                        import sys
                        import os
                        sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
                        from app.main import add_server_log
                        
                        add_server_log("worldbank_trends_error", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É —Ç—Ä–µ–Ω–¥—ñ–≤ {indicator_code}", {
                            "url": url,
                            "country": country,
                            "indicator": indicator_code,
                            "error": str(indicator_error),
                            "error_type": type(indicator_error).__name__
                        })
                    except Exception as log_error:
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —Ç—Ä–µ–Ω–¥—ñ–≤: {log_error}")
                    
                    continue
            
            if not all_data:
                raise Exception("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤")
            
            print(f"‚úÖ –ó–∞–≥–∞–ª–æ–º –æ—Ç—Ä–∏–º–∞–Ω–æ {len(all_data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤")
            
            # Create DataFrame and pivot to have indicators as columns
            # / –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —è–∫ –∫–æ–ª–æ–Ω–∫–∏
            df_temp = pd.DataFrame(all_data)
            data = df_temp.pivot_table(
                index=['Country', 'Year'], 
                columns='Indicator', 
                values='Value', 
                aggfunc='first'
            ).reset_index()
            
            if data.empty:
                raise Exception("World Bank API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤")
            
            # Rename columns to friendly names
            # / –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –¥—Ä—É–∂–Ω—ñ –Ω–∞–∑–≤–∏
            code_to_name = {code: name for name, code in self.indicators.items()}
            rename_map = {code: code_to_name.get(code, code) for code in data.columns if code not in ['Country', 'Year']}
            data.rename(columns=rename_map, inplace=True)
            
            df = data
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —Ç—Ä–µ–Ω–¥–∏
            trends = {}
            for indicator in indicators:
                if indicator in df.columns:
                    values = df[indicator].dropna()
                    if len(values) > 1:
                        # –ü—Ä–æ—Å—Ç–∏–π –ª—ñ–Ω—ñ–π–Ω–∏–π —Ç—Ä–µ–Ω–¥
                        x = np.arange(len(values))
                        y = values.values
                        trend_slope = np.polyfit(x, y, 1)[0]
                        trends[indicator] = {
                            'slope': trend_slope,
                            'direction': '–∑—Ä–æ—Å—Ç–∞–Ω–Ω—è' if trend_slope > 0 else '—Å–ø–∞–¥',
                            'latest_value': values.iloc[-1],
                            'years_analyzed': len(values)
                        }
            
            print(f"–£—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç—Ä–µ–Ω–¥–∏: {list(trends.keys())}")
            return {
                'country': self.countries.get(country, country),
                'country_code': country,
                'analysis_period': f"{current_year - limited_years}-{current_year}",
                'trends': trends,
                'raw_data': df.to_dict('records')
            }
            
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–µ–Ω–¥—ñ–≤ —á–µ—Ä–µ–∑ wbgapi: {e}")
            print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
            raise Exception(f"World Bank API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è —Ç—Ä–µ–Ω–¥—ñ–≤: {e}")
    
    
    
    def normalize_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ù–æ—Ä–º–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        
        Args:
            df: DataFrame –∑ –¥–∞–Ω–∏–º–∏ –°–≤—ñ—Ç–æ–≤–æ–≥–æ –±–∞–Ω–∫—É
        
        Returns:
            –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π DataFrame
        """
        df_normalized = df.copy()
        
        # –í–í–ü –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –º—ñ–ª—å—è—Ä–¥–∏ –¥–æ–ª–∞—Ä—ñ–≤
        if 'GDP' in df_normalized.columns:
            df_normalized['GDP'] = df_normalized['GDP'] / 1_000_000_000
        
        # –í–í–ü –Ω–∞ –¥—É—à—É –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î (–≤–∂–µ –≤ –¥–æ–ª–∞—Ä–∞—Ö)
        # –Ü–Ω—Ñ–ª—è—Ü—ñ—é —Ç–∞ –±–µ–∑—Ä–æ–±—ñ—Ç—Ç—è –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î (–≤—ñ–¥—Å–æ—Ç–∫–∏)
        
        # –ï–∫—Å–ø–æ—Ä—Ç —Ç–∞ —ñ–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –º—ñ–ª—å—è—Ä–¥–∏ –¥–æ–ª–∞—Ä—ñ–≤
        for col in ['EXPORTS', 'IMPORTS']:
            if col in df_normalized.columns:
                df_normalized[col] = df_normalized[col] / 1_000_000_000
        
        # –ù–∞—Å–µ–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –º—ñ–ª—å–π–æ–Ω–∏
        if 'POPULATION' in df_normalized.columns:
            df_normalized['POPULATION'] = df_normalized['POPULATION'] / 1_000_000
        
        return df_normalized
    
    def analyze_economic_health(self, df: pd.DataFrame) -> Dict:
        """
        –ê–Ω–∞–ª—ñ–∑—É—î –µ–∫–æ–Ω–æ–º—ñ—á–Ω–µ –∑–¥–æ—Ä–æ–≤'—è –∫—Ä–∞—ó–Ω –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
        
        Args:
            df: DataFrame –∑ –µ–∫–æ–Ω–æ–º—ñ—á–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏
        
        Returns:
            –°–ª–æ–≤–Ω–∏–∫ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è
        """
        analysis = {}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ DataFrame –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π
        if df.empty:
            return analysis
            
        for country in df['Country'].unique():
            country_data = df[df['Country'] == country]
            
            # –û—Å—Ç–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ
            latest_data = country_data.iloc[-1] if not country_data.empty else None
            
            if latest_data is not None:
                health_score = 0
                indicators = {}
                
                # –í–í–ü –Ω–∞ –¥—É—à—É (–≤–∞–≥–∞ 30%)
                if 'GDP_PER_CAPITA' in latest_data and pd.notna(latest_data['GDP_PER_CAPITA']):
                    gdp_per_capita = float(latest_data['GDP_PER_CAPITA'])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python float
                    if gdp_per_capita > 50000:
                        gdp_score = 100
                    elif gdp_per_capita > 25000:
                        gdp_score = 80
                    elif gdp_per_capita > 10000:
                        gdp_score = 60
                    elif gdp_per_capita > 5000:
                        gdp_score = 40
                    else:
                        gdp_score = 20
                    
                    health_score += gdp_score * 0.3
                    indicators['GDP_PER_CAPITA'] = {
                        'value': float(gdp_per_capita),
                        'score': int(gdp_score),
                        'weight': 0.3
                    }
                
                # –Ü–Ω—Ñ–ª—è—Ü—ñ—è (–≤–∞–≥–∞ 25%)
                if 'INFLATION' in latest_data and pd.notna(latest_data['INFLATION']):
                    inflation = float(latest_data['INFLATION'])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python float
                    if inflation < 2:
                        inflation_score = 100
                    elif inflation < 5:
                        inflation_score = 80
                    elif inflation < 10:
                        inflation_score = 60
                    elif inflation < 20:
                        inflation_score = 40
                    else:
                        inflation_score = 20
                    
                    health_score += inflation_score * 0.25
                    indicators['INFLATION'] = {
                        'value': float(inflation),
                        'score': int(inflation_score),
                        'weight': 0.25
                    }
                
                # –ë–µ–∑—Ä–æ–±—ñ—Ç—Ç—è (–≤–∞–≥–∞ 25%)
                if 'UNEMPLOYMENT' in latest_data and pd.notna(latest_data['UNEMPLOYMENT']):
                    unemployment = float(latest_data['UNEMPLOYMENT'])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python float
                    if unemployment < 3:
                        unemployment_score = 100
                    elif unemployment < 5:
                        unemployment_score = 80
                    elif unemployment < 8:
                        unemployment_score = 60
                    elif unemployment < 15:
                        unemployment_score = 40
                    else:
                        unemployment_score = 20
                    
                    health_score += unemployment_score * 0.25
                    indicators['UNEMPLOYMENT'] = {
                        'value': float(unemployment),
                        'score': int(unemployment_score),
                        'weight': 0.25
                    }
                
                # –û—á—ñ–∫—É–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è (–≤–∞–≥–∞ 20%)
                if 'LIFE_EXPECTANCY' in latest_data and pd.notna(latest_data['LIFE_EXPECTANCY']):
                    life_expectancy = float(latest_data['LIFE_EXPECTANCY'])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python float
                    if life_expectancy > 80:
                        life_score = 100
                    elif life_expectancy > 75:
                        life_score = 80
                    elif life_expectancy > 70:
                        life_score = 60
                    elif life_expectancy > 65:
                        life_score = 40
                    else:
                        life_score = 20
                    
                    health_score += life_score * 0.2
                    indicators['LIFE_EXPECTANCY'] = {
                        'value': float(life_expectancy),
                        'score': int(life_score),
                        'weight': 0.2
                    }
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è
                if health_score >= 80:
                    health_level = "Excellent"
                elif health_score >= 60:
                    health_level = "Good"
                elif health_score >= 40:
                    health_level = "Medium"
                elif health_score >= 20:
                    health_level = "Poor"
                else:
                    health_level = "Critical"
                
                analysis[country] = {
                    'country_name': str(latest_data.get('Country_Name', country)),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python string
                    'health_score': round(float(health_score), 1),  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python float
                    'health_level': health_level,
                    'indicators': indicators,
                    'latest_year': int(latest_data.get('Year', 0))  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ Python int
                }
            else:
                # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∫—Ä–∞—ó–Ω–∏
                analysis[country] = {
                    'country_name': self.countries.get(country, country),
                    'health_score': 0,
                    'health_level': "No Data",
                    'indicators': {},
                    'latest_year': 'N/A'
                }
        
        return analysis
    
    def get_currency_conversion_rates(self) -> Dict[str, float]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó (–ø—Ä–∏–±–ª–∏–∑–Ω—ñ)
        """
        return {
            'USD': 1.0,      # –ë–∞–∑–æ–≤–∞ –≤–∞–ª—é—Ç–∞
            'EUR': 0.85,     # –Ñ–≤—Ä–æ
            'UAH': 36.5,     # –ì—Ä–∏–≤–Ω—è
            'PLN': 4.0,      # –ó–ª–æ—Ç–∏–π
            'GBP': 0.8,      # –§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤
            'JPY': 110.0,    # –Ñ–Ω–∞
            'CNY': 6.5,      # –Æ–∞–Ω—å
        }
    
    def convert_to_usd(self, df: pd.DataFrame, currency: str = 'USD') -> pd.DataFrame:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç—É—î –¥–∞–Ω—ñ –≤ –¥–æ–ª–∞—Ä–∏ –°–®–ê
        
        Args:
            df: DataFrame –∑ –¥–∞–Ω–∏–º–∏
            currency: –í–∞–ª—é—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
        
        Returns:
            DataFrame –∑ –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        """
        df_converted = df.copy()
        rates = self.get_currency_conversion_rates()
        
        if currency in rates and currency != 'USD':
            rate = rates[currency]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –í–í–ü —Ç–∞ —ñ–Ω—à—ñ –≥—Ä–æ—à–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
            money_columns = ['GDP', 'GDP_PER_CAPITA', 'EXPORTS', 'IMPORTS']
            for col in money_columns:
                if col in df_converted.columns:
                    df_converted[col] = df_converted[col] / rate
        
        return df_converted
    
